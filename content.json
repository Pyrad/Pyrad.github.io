{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Create my first blog on Github","text":"How to create my first blog on Github First install nodejs Install ‘cnpm’ because of “Great Fire Wall” 1npm install -g cnpm --registry=https://registry.npm.taobao.org Install hexo 1cnpm install -g hexo-cli Check if hexo is installed: 1hexo -v cd a new blog directory, then 123mkdir -p /path/to/blogdircd /path/to/blogdirhexo init Start hexo service 1hexo s This would print the following messages, and we could check it locally with http://localhost:4000 123INFO Validating configINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. Create another blog file: hexo n “NewFileName” 1hexo n &lt;TheNewFileName&gt; You could see the new file is created: /path/to/blogdir/source/_post/TheNewFileNameYou could edit it as you want After editing is done, go back to /path/to/blogdir, use command to clean 1hexo clean Generate: 1hexo g Now you could see you blog file by starting the local service again 1hexo s check at: http://localhost:4000 Next steps are to deploy your blog to your Github repository First create you own page by create a new Github repo as: Pyrad.github.ioHere ‘Pyrad’ is the nickname of my account, and it must be in such name format Go back to /path/to/blogdir, use the command below to install a plugin 12345678&gt; cnpm install --save hexo-deployer-gitD:\\MyBlog&gt; cnpm install --save hexo-deployer-git| [0/1] Installing domhandler@^4.2.0platform unsupported hexo-deployer-git@3.0.0 › hexo-fs@3.1.0 › chokidar@3.5.2 › fsevents@~2.3.2 Package require os(darwin) not compatible with your platform(win32)[fsevents@~2.3.2] optional install error: Package require os(darwin) not compatible with your platform(win32)√ Installed 1 packages√ Linked 53 latest versions√ Run 0 scripts√ All packages installed (53 packages installed from npm registry, used 7s(network 7s), speed 396.44KB/s, json 53(143.2KB), tarball 2.56MB) Edit _config.yml 12345678910111213141516171819202122D:\\MyBlog&gt;dir Volume in drive D is 本地磁盘 Volume Serial Number is 40E8-0C16 Directory of D:\\MyBlog2021/07/18 10:11 &lt;DIR&gt; .2021/07/18 10:11 &lt;DIR&gt; ..2021/07/18 09:56 &lt;DIR&gt; .github2021/07/18 09:56 71 .gitignore2021/07/18 10:22 31,683 db.json2021/07/18 10:27 &lt;DIR&gt; node_modules2021/07/18 09:57 56,333 package-lock.json2021/07/18 10:27 655 package.json2021/07/18 10:11 &lt;DIR&gt; public2021/07/18 09:56 &lt;DIR&gt; scaffolds2021/07/18 09:56 &lt;DIR&gt; source2021/07/18 09:56 &lt;DIR&gt; themes2021/07/18 09:56 0 _config.landscape.yml2021/07/18 09:56 2,546 _config.yml 6 File(s) 91,288 bytes 8 Dir(s) 29,096,636,416 bytes free change the Deployment section as below: 123456# Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy: type: git repo: git@github.com:Pyrad/Pyrad.github.io.git branch: master Here repo is the ssh address for my github page Using hexo to deploy (didn’t succeed, to handle with SSH key) 1hexo d Note that it would be better using Git bash here. 12345678910111213141516171819Pyrad@SSEA MINGW64 /d/MyBlog$ hexo dINFO Validating configINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...warning: LF will be replaced by CRLF in 2021/07/18/My-first-blog-file/index.html.The file will have its original line endings in your working directory.... ...warning: LF will be replaced by CRLF in js/script.js.The file will have its original line endings in your working directory.On branch masternothing to commit, working tree cleanPermission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rights Here an error happened, because the RSA key has not been created yet, or it has been created while it has a different name. In general, the following command will be used to created the key 12# Create a SSH key, it will create 'id_rsa.pub' in ~/.sshssh-keygen -t rsa But sometimes you’d like to use a different name other than the default name, then you add an option 1ssh-keygen -t rsa -C &quot;YouEmail@example.com&quot; then a key file with different name is created, as below, 123Pyrad@SSEA MINGW64 /d/MyBlog$ ls ~/.ssh/github_rsa github_rsa.pub known_hosts In this circumstances, when you type the following command, it reports errors 123Pyrad@SSEA MINGW64 /d/MyBlog$ ssh -T git@github.comPermission denied (publickey). That is because it uses the default name id_rsa to try the connection, while you only have github_rsa which is a non-default name, so create a default key file, or add a config file (~/.ssh/config) as below to specify your own key file 1234Host github.com HostName github.com User Pyrad IdentityFile ~/.ssh/github_rsa Deploy again (succeeded) 1hexo d It succeeded this time, 12345678910111213141516171819Pyrad@SSEA MINGW64 /d/MyBlog$ hexo dINFO Validating configINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanCounting objects: 46, done.Delta compression using up to 4 threads.Compressing objects: 100% (34/34), done.Writing objects: 100% (46/46), 885.75 KiB | 2.61 MiB/s, done.Total 46 (delta 7), reused 0 (delta 0)remote: Resolving deltas: 100% (7/7), done.To github.com:Pyrad/Pyrad.github.io.git + 90d1898...2c43a78 HEAD -&gt; master (forced update)Branch master set up to track remote branch master from git@github.com:Pyrad/Pyrad.github.io.git.INFO Deploy done: git Now you could view your page by visiting Pyrad’s Blog Page If you change your blog files later or add a new file, you could push the changes again by the following commands 1234hexo cleanhexo g #If a different theme is applied or other operations is donehexo s #Just for local previewhexo d References Bilibili video Code Sheep’s tutorial","link":"/2021/07/19/Create-my-first-blog-on-Github/"},{"title":"Git commands","text":"Frequently used git commands Create a git repository Set the name and email of current git repo user Globally 12$ git config --global user.name &lt;USER_NAME&gt;$ git config --global user.email &lt;EMAIL&gt; Locally 12$ git config --local user.name &lt;USER_NAME&gt;$ git config --local user.email &lt;EMAIL&gt; To see the existing configurations, use command 1$ git config --list To get a specific configuration, use command ‘git config ‘, e.g. 1$ git config user.name To get help, use command like this, ‘git help ‘, e.g. 1$ git help config Check logs. 1234# Check last 4 git logs by printing each log in one linegit log --oneline --graph -4# Check last one log, normallygit log -1 If you add a new file which hasn’t been tracked before in the repository, first you have to put this file into the so-called “staged area”, using command below, 1git add &lt;FILE_NAME&gt; If you have already modified a file which has been tracked before in the repository, you also have to put file into the so-called “staged area”, using the command below (indeed same as the command above), 1git add &lt;FILE_NAME&gt; After you have put the file (newly added or already be tracked in repo), you put file(s) into (local) repository using the command below, 1git commit If you modify a file, you can tell the difference by the command below, 1git diff If you have already put the file(s) into the staged area, you will see nothing by ‘git diff’. This time, you should use the command below to tell the differences, 12git diff --cached git diff --staged --&gt; git version &gt;= 1.61 Use a tool to check the differences of files, 1234# fullgit difftool --tool=tkdiff# short git difftool -t &lt;tool_name&gt; To see all the differences in current branch and master branch, use command below to output those differences, 1git format-patch -M master -o &lt;OUTPUT_DIR&gt; To patch the current branch with *.patch files, use command, 1git am ~/&lt;SOME_DIR&gt;/*.patch To create a new branch from current master branch, use command, 1git checkout -b &lt;BRANCH_NAME&gt; master To remove/delete a branch (git branch), use command 1git branch -d &lt;BRANCH_NAME&gt; If there’s anything not fully merged, git will stop the deletion. Use force command to do it (if confirmed to delete), 1git branch -D &lt;BRANCH_NAME&gt; One way to remove untracked files is,(1) To see all the untracked files, 1git clean -n Note here the option “-n” is very important, it just shows files untracked, no deleting(2) Clean if all the files listed above are supposed to be removed, 1git clean -f To remove unstaged files, use commands below,(1) For a specific file use: 1git checkout &lt;PATH_TO_FILE_TO_REVERT&gt; (2) For all unstaged files use: 1git checkout -- . Rename a branch 1git branch -m &lt;OLD_BRANCH_NAME&gt; &lt;NEW_BRANCH_NAME&gt; Rebase a branch(1) Switch to a branch which need rebase 1git checkout &lt;DEV_BRANCH&gt; (2) Rebase 1git rebase master Show origin information 123$ git remote$ git remote show origin Move a file 1git mv &lt;OLD_FILE&gt; &lt;NEW_FILE&gt; By moving files with git, we notify git about two things(1) The hello.html file was deleted.(2) The lib/hello.html file was created.Both facts are staged immediately and ready for a commit. Git status command reports the file has been moved. Git aliasesEquals to ‘git checkout’ 1$ git config --global alias.co checkout Equals to ‘git branch’ 1$ git config --global alias.br branch Equals to ‘git commit’ 1$ git config --global alias.ci commit Equals to ‘git status’ 1$ git config --global alias.st status Create a new branch in local and then push it to the remote (GitHub) and then track it 1234567891011121314# 1. Create a new branch in localgit branch &lt;NEW_BRANCH_NAME&gt;# 2. Get the remote repo namegit remote# 3. Push the new branch to remote repogit push &lt;REMOTE_REPO_NAME&gt; &lt;NEW_BRANCH_NAME&gt;# Usually remote repo name is 'origin'git push origin &lt;NEW_BRANCH_NAME&gt;# 4. Connect this new local branch with the new branch just pushed to the remote repogit branch --set-upstream-to=origin/&lt;NEW_BRANCH_NAME&gt;# 5. After that, modify code and push as usaulgit add -Agit commit -m &quot;XXXXX&quot;git push (or use git push origin &lt;NEW_BRANCH_NAME&gt;) Remove files and restore files Reference website git 删除文件与恢复 A file was deleted locally by shell commands other than git commands, but it was not added to the stage area, use checkout option to restore 1234# Remove a file locally by shell commandsrm &lt;FILE&gt;# Restore the filegit checkout -- &lt;FILE&gt; A file was deleted locally by shell commands other than git commands, and it was added to the stage area, first use reset command to rollback the file to the status of locally removed, and then use checkout option to restore 1234567891011121314151617##### 1st situation# Remove a file locally by shell commandsrm &lt;FILE&gt;# Add to staged area (deleted)git add &lt;FILE&gt;# Rollbackgit reset HEAD &lt;FILE&gt;# Restore the filegit checkout -- &lt;FILE&gt;##### 2nd situation# Remove a file locally by git command which will add it to staged area (deleted)git rm &lt;FILE&gt;# Rollbackgit reset HEAD &lt;FILE&gt;# Restore the filegit checkout -- &lt;FILE&gt; A file was deleted locally either by shell commands or git commands, and it was not only added to the stage area, but also committed to local repository, then we need to use reset --hard &lt;ID&gt; to rollback (ID is got by using git log command) 12345678910111213141516171819202122##### 1st situation# Remove a file locally by shell commandsrm &lt;FILE&gt;# Add to staged area (deleted)git add &lt;FILE&gt;# Commitgit commit -m &quot;Delete a file&quot;# Get the version ID by using the log optiongit log --pretty=oneline# Rollbackgit reset --hard &lt;ID&gt;##### 2nd situation# Remove a file locally by git command which will add it to staged area (deleted)git rm &lt;FILE&gt;# Commitgit commit -m &quot;Delete a file&quot;# Get the version ID by using the log optiongit log --pretty=oneline# Rollbackgit reset --hard &lt;ID&gt; A file was deleted locally either by shell commands or git commands, and it was not only committed to the local repository, but also push to the remote repository (e.g., Github), then following the steps above, and the use git push -fto push the restored files back to the remote repository. Note here -f is a must, because git doesn’t allow lower versions override higher versions. 12345678910111213141516171819202122232425##### 1st situation# Remove a file locally by shell commandsrm &lt;FILE&gt;# Add to staged area (deleted)git add &lt;FILE&gt;# Commitgit commit -m &quot;Delete a file&quot;# Get the version ID by using the log optiongit log --pretty=oneline# Rollbackgit reset --hard &lt;ID&gt;# Push to remotegit push -f##### 2nd situation# Remove a file locally by git command which will add it to staged area (deleted)git rm &lt;FILE&gt;# Commitgit commit -m &quot;Delete a file&quot;# Get the version ID by using the log optiongit log --pretty=oneline# Rollbackgit reset --hard &lt;ID&gt;# Push to remotegit push -f","link":"/2022/04/22/Git-commands/"},{"title":"LinuxTips","text":"Tips for Linux daily use 如果想提取同时包含两个关键词的行，可以用awk命令 1awk '/KEY_WORD_1/&amp;&amp;/KEY_WORD_2/' &lt;filename&gt; 比如，如果想在文件cdesigner.log中提取行，这些行同时含有关键词”/o”和”FAILED”，那么就可用命令： 1awk '/\\/o/&amp;&amp;/FAILED/' cdesigner.log 结果会在terminal中打印出来。 如果这两个关键词需要被精确匹配（比如只找work，而不是worker或者homework之类的），那么就用 1awk '/\\&lt;KEY_WORD_1\\&gt;/&amp;&amp;/\\&lt;KEY_WORD_2\\&gt;/' &lt;filename&gt; Vim中搜索多个keyword Go to search mode i.e. type ‘/‘ and then type \\v followed by the words you want to search separated by ‘ | ‘ (pipe). Example: 1/\\vword1|word2|word3 Go to search mode and type the words you want to search separated by ‘| ‘. Example: 1/word1\\|word2\\|word3 要取消文件名扩展用 1set noglob 要取消文件名扩展无匹配出错用 1set nonomatch 要屏蔽出错信息用 1(cmd &gt;/dev/tty) &gt;&amp;/dev/null 要屏蔽信息用 1cmd &gt;&amp;/dev/null 以递归的方式列出文件 12find /path/to/search/ -printfind /path/to/search/ -ls 比如 1find . -print 或者 1find . -ls 结束后台进程 a. 列出后台进程： 1jobs b. 结束命令： 1kill -9 %N（N是jobs列出的进程序号） Bash shell中变量自增的办法 12345678910# 1sti=`expr $i + 1`;# 2ndlet i+=1;# 3rd((i++));# 4thi=$[$i+1];# 5thi=$(( $i + 1 )) 取出指定文本的第10到15行： 1sed -n '10,15p' FILENAME 取出指定的行(1015, 23, 49, 169221) 1sed -n '10,15p;23,23p;49,49;169,221p' FILENAME sed 原地替换 1sed -i 's/annotateCurrents/annotateDesign/g' test.txt 同时找出多种后缀结尾的文件并grep 1find . -regex '.*\\.tcl\\|.*\\.log' | xargs grep -rn &quot;rtUseKeepoutWidth&quot; &gt; ~/find_result_useKeep.rpt 在vim中对第10至20行的文本按第5个字段以数值升序进行排序 1:10,20!sort -n -k5 linux中find的结果提供给数组使用 12array=($(find . -name &quot;*.txt&quot;))for i in &quot;${array[@]}&quot;; do echo $i; done 删除一个符号链接的方法： 1rm -rf symbolic_name 注意不是rm -rf symbolic_name/也就是说，如果要删除一个符号链接，如果是符号链接文件，直接删除即可，如果是符号链接文件夹，那么在后面就不可以带斜杠”/“ 如果ps的时候中出现，就是僵尸进程，需要kill掉其父进程来kill这个子进程，单独kill这个子进程是没有用的。命令是： 1ps -e -o ppid,stat | grep Z | cut -d” ” -f2 | xargs kill -9 alt+退格，删除最后一个单词 shell脚本参数$0 ： ./test.sh,即命令本身，相当于c/c++中的argv[0]$1 ： -f,第一个参数.$2 ： config.conf$3, $4 ... ：类推。$# : 参数的个数，不包括命令本身，上例中$#为4.$@ ：参数本身的列表，也不包括命令本身，如上例为 -f config.conf -v –prefix=/home$* ：和$@相同，但”$“ 和 “$@”(加引号)并不同，”$“将所有的参数解释成一个字符串，而”$@”是一个参数数组。 判断字符串为空 123if [ &quot;$str&quot; = &quot;&quot; ] if [ x&quot;$str&quot; = x ]if [ -z &quot;$str&quot; ] （-n 为非空） shell中if的正则匹配可以用如下变量来捕获 123456789#!/bin/baship=&quot;121.0&quot;if [[ $ip =~ ^([0-9]+)\\.([0-9]+)$ ]];thenecho &quot;match&quot;echo ${BASH_REMATCH[1]}echo ${BASH_REMATCH[2]}elseecho &quot;Not match&quot;fi Csh中打印某个env 1printenv LANG 几种快速清空文件内容的方法： 123456$ : &gt; filename #其中的 : 是一个占位符, 不产生任何输出.$ &gt; filename$ echo “” &gt; filename$ echo /dev/null &gt; filename$ echo &gt; filename$ cat /dev/null &gt; filename XZ格式的文件解压 1xz -kd &lt;FILE_NAME&gt; 这里，k表示–keep，意思是解压之后不删除源文件包，d表示–decompress，意为解压之后再用tar命令解压 1tar xf &lt;FILE_NAME&gt; tar 打包 1tar -czf &lt;TARGET&gt;.tar.gz &lt;FILES_TO_BE_COMPRESSED&gt; 查看Linux版本 123456cat /proc/versionuname -auname -rlsb_release -acat /etc/issuecat /etc/redhat-release 查看是64位还是32位 12getconf LONG_BIT or getconf WORD_BITfile /bin/ls linux 下最大化窗口用Alt + F10，恢复原窗口大小，再次Alt + F10 grep 显示匹配行之前或之后或者之前以及之后的选项：显示匹配行，以及之后3行（共4行）。A-After 1grep -A 3 &quot;PATTERN&quot; file.txt 显示匹配行，以及之前3行（共4行）。B-Before 1grep -B 3 &quot;PATTERN&quot; file.txt 显示匹配行，以及之前3行和之后三行（共7行） 1grep -C 3 &quot;PATTERN&quot; file.txt grep -l 表示只显示文中有match pattern的文件名列表 递归搜索目录，并排除文件夹 1grep -R --exclude-dir=node_modules &quot;sa_family_t&quot; &lt;path_to_search&gt; 只计算匹配的行数，用-c这个选项。 1grep -c &quot;&lt;KEYWORD&gt;&quot; &lt;path_to_file&gt; 只计算不匹配的行数，用-vc这个选项。 1grep -vc &quot;&lt;KEYWORD&gt;&quot; &lt;path_to_file&gt; 如果要grep一定行数范围内的（比如从5672行到13677行），可以用awk 1awk '/string_to_search/ &amp;&amp; NR &gt;= 5672 &amp;&amp; NR &lt;= 13677' stack_execute.cpp 同时grep多个keyword 1grep 'word1\\|word2\\|word3' /path/to/file cshell中的tee命令在Cshell中把stderr和stdout的输出信息重定向到一个文件里，用&gt;&amp;，比如 1xxx &gt;&amp; run.log (This will force both standard output and standard error to go to the same place as the current standard output, effectively what you have with the bash redirection, 2&gt;&amp;1.) 如果要同时把stderr和stdout打印到屏幕上，并记到log里面，用 |&amp;，比如 1xxx |&amp; tee run.log 目录中最旧和最新的文件： 12find -type f -printf '%T+ %p\\n' | sort | head -n 1find -type f -printf '%T+ %p\\n' | sort | tail -n 1 find查找多个关键字文件：在-name之间用”-o” 1find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; CGDB设置source window中指向当前马上要执的代码行的箭头格式为长箭头格式 1:set arrowstyle=long 设置source window中当前马上要执的代码行为block格式 1:set selectedlinedisplay=block Check linux kernel version 1uname -r Check CentOS version 1lsb_release -d 查看当前目录下（深度为1）各个文件以及目录占用磁盘大小 1du -h --max-depth=1 .","link":"/2022/04/20/LinuxTips/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/04/17/hello-world/"},{"title":"Hexo git to different computer","text":"Hexo git to different computer create a clean local hexo blog directoryinstall hexo first ! 1npm install hexo-cli -g Initialize hexo folder12# hexo init FOLDER_NAMEhexo init hexolocal Change “_config.yml”1234567url: https://username.github.io/...deploy:type: gitrepo: https://github.com/username/username.github.iobranch: master Generate12345# under hexo folderhexo g# view on the loclalhexo s Pull the Blog page repo &amp; copy the local hexo files to a different working branch123git clone git@github.com:Pyrad/Pyrad.github.io.gitcd Pyrad.github.iogit pull Create a new branch for hexo folder1234# Create a new branch: hexogit branch hexo# Change to the new hexo branch for working !!!git checkout hexo Clean the branch1git rm -rf . Copy all files inside the previous hexo folder here123456789101112cp -rf /path/to/hexolocal/.github .cp -rf /path/to/hexolocal/scaffolds/ .cp -rf /path/to/hexolocal/source/ .cp -rf /path/to/hexolocal/themes/ .cp -rf /path/to/hexolocal/.gitignore/ .cp -rf /path/to/hexolocal/_config.*/ .cp -rf /path/to/hexolocal/package.json/ .cp -rf /path/to/hexolocal/package-lock.json/ .git add .git commit -m &quot;create hexo branch for blog source files; Use this as the default working branch for blogging&quot;git push ### Should set up the upstream first Regenerate the hexo file modules12cnpm installcnpm install hexo-deployer-git --save Try hexo123hexo -vhexo ghexo s","link":"/2021/07/19/hexo-git-on-diff-computers/"},{"title":"tips-for-windows","text":"Tips for Windows System In Windows 10, put the shortcuts to the following startup folder to make it start together with the OS 1%programdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup For example, 1C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp","link":"/2022/04/18/tips-for-windows/"}],"tags":[{"name":"git","slug":"git","link":"/tags/git/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"windows","slug":"windows","link":"/tags/windows/"}],"categories":[{"name":"Hexo related","slug":"Hexo-related","link":"/categories/Hexo-related/"},{"name":"linux related","slug":"linux-related","link":"/categories/linux-related/"},{"name":"windows related","slug":"windows-related","link":"/categories/windows-related/"}]}